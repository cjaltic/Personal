#lang racket


(define empty-env
  (λ ()
    '()))
 
(define empty-k
  (λ ()
    (λ (v)
      v)))


(define value-of-cps
  (lambda (expr env k)
    (match expr
      [`(const ,expr) (apply-k k expr)]
      [`(mult ,x1 ,x2) (value-of-cps x1 env (lambda (v)
                                              (value-of-cps x2 env (lambda (u)
                                                                     (apply-k k (* v u))))))]
      [`(sub1 ,x) (value-of-cps x env (k-sub1 k))]
      [`(zero ,x) (value-of-cps x env (k-zero k))]
      [`(if ,test ,conseq ,alt) (value-of-cps test env (lambda (v)
                                                         (if v
                                                             (value-of-cps conseq env (lambda (u)
                                                                                        (apply-k k u)))
                                                             (value-of-cps alt env (lambda (u)
                                                                                     (apply-k k u))))))]
      [`(letcc ,body) (value-of-cps body (extend-env k env) k)]
      [`(throw ,k-exp ,v-exp) (value-of-cps k-exp env (lambda (v)
                                                        (value-of-cps v-exp env (lambda (u)
                                                                                  (v u)))))]
      [`(let ,e ,body) (value-of-cps e env (lambda (v)
                                             (value-of-cps body (extend-env v env) k)))]
      [`(var ,y) (apply-env env y k)]
      [`(lambda ,body) (apply-k k (make-closure body env))]
      [`(app ,rator ,rand) (value-of-cps rator env (lambda (v)
                                                     (value-of-cps rand env (lambda (u)
                                                                              (apply-closure v u k)))))])))



;; part 9


#|
(define k-sub1
  (λ (k)
      `(k-sub1 ,k)))

(define k-zero
  (lambda (k)
    `(k-zero ,k)))
|#


;; tag a closure with caltic, my student id
(define make-closure
  (λ (body env)
    `(caltic ,body ,env)))

(define apply-closure
  (λ (v u k)
    (match v
      [`(caltic ,body ,env)
       (value-of-cps body (extend-env u env) k)])))

(define extend-env
  (λ (x env)
    `(,x . ,env)))

(define apply-env
  (λ (env y k)
    (match env
      ['() (error "you fucked up")]
      [else (if (zero? y) (apply-k k (car env)) 
                (apply-env (cdr env) (sub1 y) k))])))

(define apply-k
  (λ (k v)
    (k v)))


#|
(define apply-k
  (λ (k v)
    (match k
      [`(k-sub1 ,k) (k (sub1 v))]
      [`(k-zero ,k) (k (zero? v))]
      [else (k v)])))
|#


;; variables needed:  body env a k
#|
(define make-closure-fn
  (λ (body env)
    (lambda (u k)
      (value-of-cps body (extend-env u env) k))))

(define apply-closure-fn
  (λ (v u k)
    (v u k)))
|#




(value-of-cps '(mult (sub1 (const 4)) (const 3)) (empty-env) (empty-k))
(value-of-cps '(app (lambda (var 0)) (const 2)) (empty-env) (empty-k))
(value-of-cps '(if (zero (const 9))
                   (const 1)
                   (const 2))
              (empty-env)
              (empty-k))
(value-of-cps '(let (const 69) (var 0)) (empty-env) (empty-k))
(value-of-cps '(letcc (throw (app (lambda (var 0)) (var 0)) (mult (const 5) (const 5)))) (empty-env) (empty-k))
;;25
(value-of-cps '(letcc (sub1 (throw (var 0) (const 5)))) (empty-env) (empty-k))
;;5
(value-of-cps '(letcc (throw (throw (var 0) (const 5)) (const 6))) (empty-env) (empty-k))
;;5
(value-of-cps '(letcc (throw (const 5) (throw (var 0) (const 5)))) (empty-env) (empty-k))
;;5
(value-of-cps '(mult (const 3) (letcc (throw (const 5) (throw (var 0) (const 5))))) (empty-env) (empty-k))
;;15
(value-of-cps '(if (zero (const 5)) (app (lambda (app (var 0) (var 0))) (lambda (app (var 0) (var 0)))) (const 4))
              (empty-env)
              (empty-k))
;;4
(value-of-cps '(if (zero (const 0)) (const 4) (app (lambda (app (var 0) (var 0))) (lambda (app (var 0) (var 0)))))
              (empty-env)
              (empty-k))
;;4
(value-of-cps '(app (lambda (app (app (var 0) (var 0)) (const 2)))
                             (lambda
                               (lambda 
                                 (if (zero (var 0))  
                                     (const 1)
                                     (app (app (var 1) (var 1)) (sub1 (var 0)))))))
                       (empty-env)
                       (empty-k))

