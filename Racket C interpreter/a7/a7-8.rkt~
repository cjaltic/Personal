#lang racket
#lang racket


(define empty-env
  (λ ()
    '()))
 
(define empty-k
  (λ ()
    (λ (v)
      v)))


(define value-of-cps
  (λ (expr env k)
    (match expr
      [`(const ,expr) (k expr)]
      [`(mult ,x1 ,x2) (value-of-cps x1 env (λ (v)
                                              (value-of-cps x2 env (λ (u)
                                                                     (apply-k k (* v u))))))]
      [`(sub1 ,x) (value-of-cps x env (λ (v)
                                        (apply-k k (sub1 v))))]
      [`(zero ,x) (value-of-cps x env (λ (v)
                                    (apply-k k (zero? v))))]
      [`(if ,test ,conseq ,alt) (value-of-cps test env (λ (v)
                                                         (if v
                                                             (value-of-cps conseq env (λ (u)
                                                                                        (apply-k k u)))
                                                             (value-of-cps alt env (λ (u)
                                                                                     (apply-k k u))))))]
      [`(letcc ,body) (make-closure body env k k)]
      [`(throw ,k-exp ,v-exp) (value-of-cps k-exp env (λ (v)
                                                        (value-of-cps v-exp env (λ (u)
                                                                                  (v u)))))]
      [`(let ,e ,body) (value-of-cps e env (λ (v)
                                             (make-closure body env v k)))]
      [`(var ,y) (apply-env env y k)]
      [`(λ ,body) (apply-k k (λ (v k) (make-closure body env v k)))]
      [`(app ,rator ,rand) (value-of-cps rator env (λ (v)
                                                     (value-of-cps rand env (λ (u)

                                                                              (apply-closure v u k)))))])))


;; variables needed:  body env v k
(define make-closure
  (λ (body env v k)
    (value-of-cps body (extend-env v env) k)))

(define extend-env
  (λ (x env)
    `(,x . ,env)))

(define apply-closure
  (λ (v u k)
    (v u k)))

(define apply-env
  (λ (env y k)
    (match env
      ['() (error "you fucked up")]
      [else (if (zero? y) (apply-k k (car env)) 
                (apply-env (cdr env) (sub1 y) k))])))

(define apply-k
  (λ (k v)
    (k v)))



(value-of-cps '(mult (sub1 (const 4)) (const 3)) (empty-env) (empty-k))
(value-of-cps '(app (λ (var 0)) (const 2)) (empty-env) (empty-k))
(value-of-cps '(if (zero (const 9))
                   (const 1)
                   (const 2))
              (empty-env)
              (empty-k))
(value-of-cps '(let (const 69) (var 0)) (empty-env) (empty-k))
(value-of-cps '(letcc (throw (app (λ (var 0)) (var 0)) (mult (const 5) (const 5)))) (empty-env) (empty-k))
;;25
(value-of-cps '(letcc (sub1 (throw (var 0) (const 5)))) (empty-env) (empty-k))
;;5
(value-of-cps '(letcc (throw (throw (var 0) (const 5)) (const 6))) (empty-env) (empty-k))
;;5
(value-of-cps '(letcc (throw (const 5) (throw (var 0) (const 5)))) (empty-env) (empty-k))
;;5
(value-of-cps '(mult (const 3) (letcc (throw (const 5) (throw (var 0) (const 5))))) (empty-env) (empty-k))
;;15
(value-of-cps '(if (zero (const 5)) (app (λ (app (var 0) (var 0))) (λ (app (var 0) (var 0)))) (const 4))
              (empty-env)
              (empty-k))
;;4
(value-of-cps '(if (zero (const 0)) (const 4) (app (λ (app (var 0) (var 0))) (λ (app (var 0) (var 0)))))
              (empty-env)
              (empty-k))
;;4
(value-of-cps '(app (λ (app (app (var 0) (var 0)) (const 2)))
                             (λ
                               (λ 
                                 (if (zero (var 0))  
                                     (const 1)
                                     (app (app (var 1) (var 1)) (sub1 (var 0)))))))
                       (empty-env)
                       (empty-k))
