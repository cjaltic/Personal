#lang racket
;; part 2

(require "parenthec.rkt")

(define empty-env
  (λ ()
    (umwelt_empty)))
 
(define empty-k
  (λ ()
    (continue_empty)))


(define-union expr
  (const cexp)
  (var n)
  (if test conseq alt)
  (mult nexp1 nexp2)
  (sub1 nexp)
  (zero nexp)
  (letcc body)
  (throw kexp vexp)
  (let exp body)              
  (lambda body)
  (app rator rand))

(define-union umwelt
	  (empty)
	  (extend-env v env))

(define-union continue
  (empty)
  (k-sub1 k)
  (k-zero k)
  (k-mult-inside u k)
  (k-mult-outside x2 env k)
  (k-if-inside conseq alt env k)
  (k-throw v-exp env)
  (k-let body env k)
  (k-rator-inside v k)
  (k-rator-outside rand env k))


(define value-of-cps
  (lambda (ex env k)
    (union-case ex expr
      [(const ex) (let* ((x k))(apply-k k ex))] 
      [(mult x1 x2) (let* ((x (continue_k-mult-outside x2 env k)))
                      (value-of-cps x1 env x))]
      [(sub1 n) (let* ((x (continue_k-sub1 k)))
                  (value-of-cps n env x))]
      [(zero n) (let* ((x (continue_k-zero k)))
                  (value-of-cps n env x))]
      [(if test conseq alt) (let* ((x (continue_k-if-inside conseq alt env k)))
                              (value-of-cps test env x))]
      [(letcc body) (value-of-cps body (umwelt_extend-env k env) k)] ;; no continuation abstraction
      [(throw k-exp v-exp) (let* ((x (continue_k-throw v-exp env)))
                             (value-of-cps k-exp env x))] 
      [(let e body) (let* ((x (continue_k-let body env k)))
                      (value-of-cps e env x))]
      [(var y) (let* ((x k))
                 (apply-env env y k))]
      [(lambda body) (let* ((x (schluss_caltic body env)))
                       (apply-k k x))]  ;; replace this instance of make-closure with the schluss union
      [(app rator rand) (let* ((x (continue_k-rator-outside rand env k)))
                          (value-of-cps rator env x))])))





(define apply-k
	  (λ (k v)
	    (union-case k continue
	      [(empty) v]
	      [(k-sub1 k)
               (apply-k k (sub1 v))]
          [(k-zero k)
               (apply-k k (zero? v))]
	      [(k-mult-outside x2 env k)
	       (let* ((k (continue_k-mult-inside v k))) 
            
                
	         (value-of-cps x2 env k))]
	      [(k-mult-inside u k)
            (apply-k k (* u v))]
	      [(k-if-inside conseq^ alt^  env^ k^)  (if v
                                                     (value-of-cps conseq^ env^ k^)
                                                     (value-of-cps alt^ env^ k^))]
          [(k-throw v-exp env)
             (value-of-cps v-exp env v)]
	      
	      [(k-let body env k)
             (value-of-cps body (umwelt_extend-env v env) k)]
	      [(k-rator-outside rand env k)
	       (let* ((k (continue_k-rator-inside v k)))
	         (value-of-cps rand env k))]
	      [(k-rator-inside v^ k^)
       (apply-closure v^ v k^)])))

;; a9 step 2 define closure union 
(define-union schluss
  (caltic body env))
;; new apply-closure using union
(define apply-closure
  (λ (v u k)
    (union-case v schluss
                [(caltic body env)
                 (value-of-cps body (umwelt_extend-env u env) k)])))

;; tag a closure with caltic, my student id
(define make-closure
  (λ (body env)
    `(caltic ,body ,env)))

#|
(define apply-closure
  (λ (v u k)
    (match v
      [`(caltic ,body ,env)
       (value-of-cps body (extend-env u env) k)]))) |#

(define extend-env
  (λ (x env)
    `(,x . ,env)))

(define apply-env
  (λ (env y k)
    (union-case env umwelt
      [(empty) (error "you fucked up")]
      [(extend-env v env) (if (zero? y) (apply-k k v) (apply-env env (sub1 y) k))])))


(define main 
  (lambda ()
    (value-of-cps 
     (expr_let 
      (expr_lambda
       (expr_lambda 
        (expr_if
         (expr_zero (expr_var 0))
         (expr_const 1)
         (expr_mult (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_sub1 (expr_var 0)))))))
      (expr_mult
       (expr_letcc
        (expr_app
         (expr_app (expr_var 1) (expr_var 1))
         (expr_throw (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_const 4)))))
       (expr_const 5)))
     (empty-env)
     (empty-k))))



(main)


